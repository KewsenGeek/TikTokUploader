import email
import imaplib
import poplib
import re
import logging
from email.header import decode_header
from email.policy import default
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è email –∫–ª–∏–µ–Ω—Ç–∞
logger = logging.getLogger(__name__)

class Email:
    IMAP_SERVER = "imap.rambler.ru"
    IMAP_PORT = 993
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    POP3_SERVER = "imap.firstmail.ltd"
    POP3_PORT = 995 # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è POP3 over SSL
    NOTLETTERS_SERVER = 'imap.notletters.com'
    NOTLETTERS_PORT = 993

    def __init__(self, login, password):
        logger.info(f"üìß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Email –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è: {login}")
        self.login = login
        self.password = password
        logger.info("‚úÖ Email –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.login}")
            logger.info(f"üåê –°–µ—Ä–≤–µ—Ä: {Email.IMAP_SERVER}:{Email.IMAP_PORT}")
            
            mail = imaplib.IMAP4_SSL(Email.IMAP_SERVER, Email.IMAP_PORT)
            logger.info("üîê SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            logger.info("üîë –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...")
            mail.login(self.login, self.password)
            logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É –≤—Ö–æ–¥—è—â–∏—Ö
            logger.info("üìÇ –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É 'inbox'...")
            mail.select("inbox")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º
            logger.info("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º...")
            status, messages = mail.search(None, "ALL")
            if status == "OK":
                message_count = len(messages[0].split()) if messages[0] else 0
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {message_count} –ø–∏—Å–µ–º")
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {message_count} –ø–∏—Å–µ–º")
            else:
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞: {status}")
            
            mail.logout()
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_verification_code(self):
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
        logger.info("üìã –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ø—ã—Ç–æ–∫:")
        logger.info("  1. NotLetters IMAP")
        logger.info("  2. Hotmail/Outlook IMAP") 
        logger.info("  3. FirstMail POP3")
        logger.info("  4. Rambler IMAP")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        methods = [
            ("NotLetters IMAP", self.get_verification_imap_notletters),
            ("Hotmail IMAP", self.get_verification_code_hotmail),
            ("FirstMail POP3", self.get_verification_code_pop3),
            ("Rambler IMAP", self.get_verification_imap)
        ]
        
        for method_name, method_func in methods:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: {method_name}")
            try:
                res = method_func()
                if res:
                    logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥–æ–º {method_name}: {res}")
                    return res
                else:
                    logger.info(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥–æ–º {method_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ {method_name}: {e}")
        
        logger.error('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º')
        return None

    def get_verification_imap(self):
        method_name = "Rambler IMAP"
        logger.info(f"üìß {method_name}: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP
            logger.info(f"üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {Email.IMAP_SERVER}:{Email.IMAP_PORT}")
            mail = imaplib.IMAP4_SSL(Email.IMAP_SERVER, Email.IMAP_PORT)
            
            logger.info("üîë –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...")
            mail.login(self.login, self.password)
            
            logger.info("üìÇ –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É inbox...")
            mail.select("inbox")
            
            # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
            import datetime
            since_date = (datetime.datetime.now() - datetime.timedelta(hours=1)).strftime("%d-%b-%Y")
            logger.info(f"üîç –ò—â–µ–º –ø–∏—Å—å–º–∞ —Å {since_date}...")
            
            status, messages = mail.search(None, f'SINCE {since_date}')
            if status != "OK":
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º: {status}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–∏—Å–µ–º
            message_ids = messages[0].split() if messages[0] else []
            logger.info(f"üìß –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(message_ids)}")
            
            if not message_ids:
                logger.warning("‚ùå –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∏—Å–µ–º
            check_count = min(5, len(message_ids))
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {check_count} –ø–∏—Å–µ–º...")
            
            for i in range(check_count):
                email_id = message_ids[-(i+1)]  # –ë–µ—Ä–µ–º —Å –∫–æ–Ω—Ü–∞ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)
                logger.info(f"üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—Å—å–º–æ {i+1}/{check_count} (ID: {email_id.decode()})")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                status, msg_data = mail.fetch(email_id, "(RFC822)")
                if status != "OK":
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–æ {i+1}")
                    continue
                
                # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                from_header = msg.get("From", "")
                logger.info(f"üë§ –û—Ç: {from_header}")
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                subject = decode_header(msg["Subject"])[0][0]
                if isinstance(subject, bytes):
                    subject = subject.decode()
                
                logger.info(f"üìã –¢–µ–º–∞: {subject}")
                
                # –ò—â–µ–º –∫–æ–¥ –≤ —Ç–µ–º–µ
                patterns = [
                    r"(\d{6})",  # 6 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
                    r"(\d+) is your verification code",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Instagram
                    r"–∫–æ–¥.*?(\d{6})",  # "–∫–æ–¥" + 6 —Ü–∏—Ñ—Ä
                    r"verification.*?(\d{6})"  # "verification" + 6 —Ü–∏—Ñ—Ä
                ]
                
                for pattern in patterns:
                    match = re.search(pattern, subject, re.IGNORECASE)
                    if match:
                        code = match.group(1)
                        if len(code) == 6:
                            logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–º–µ –ø–∏—Å—å–º–∞ {i+1}: {code}")
                            return code
                
                # –ï—Å–ª–∏ –≤ —Ç–µ–º–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                try:
                    body = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/plain":
                                body = part.get_payload(decode=True).decode()
                                break
                    else:
                        body = msg.get_payload(decode=True).decode()
                    
                    logger.info(f"üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ {i+1} (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {body[:200]}...")
                    
                    for pattern in patterns:
                        match = re.search(pattern, body, re.IGNORECASE)
                        if match:
                            code = match.group(1)
                            if len(code) == 6:
                                logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞ {i+1}: {code}")
                                return code
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞ {i+1}: {e}")
            
            logger.warning(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {check_count} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞—Ö")
            return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method_name}: {e}")
            return None
        finally:
            try:
                mail.logout()
                logger.info(f"üîå {method_name}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except:
                pass

    def get_verification_code_pop3(self):
        method_name = "FirstMail POP3"
        logger.info(f"üìß {method_name}: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
            logger.info(f"üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {Email.POP3_SERVER}:{Email.POP3_PORT}")
            mail = poplib.POP3_SSL(Email.POP3_SERVER, Email.POP3_PORT)
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            logger.info("üîë –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...")
            mail.user(self.login)
            mail.pass_(self.password)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
            logger.info("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —è—â–∏–∫–∞...")
            num_messages = len(mail.list()[1])
            logger.info(f"üìß –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {num_messages}")
            
            if num_messages == 0:
                logger.warning("‚ùå –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø—É—Å—Ç")
                mail.quit()
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∏—Å—å–º–∞
            check_count = min(3, num_messages)
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {check_count} –ø–∏—Å–µ–º...")
            
            for i in range(check_count):
                msg_num = num_messages - i  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                logger.info(f"üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—Å—å–º–æ {i+1}/{check_count} (–Ω–æ–º–µ—Ä {msg_num})")
                
                response, lines, octets = mail.retr(msg_num)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç—ã –∏ –ø–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
                raw_email = b'\r\n'.join(lines)
                msg = email.message_from_bytes(raw_email, policy=default)
                
                # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                subject, encoding = decode_header(msg["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding or "utf-8")
                
                from_, encoding = decode_header(msg.get("From"))[0]
                if isinstance(from_, bytes):
                    from_ = from_.decode(encoding or "utf-8")
                
                logger.info(f"üë§ –û—Ç: {from_}")
                logger.info(f"üìã –¢–µ–º–∞: {subject}")
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            body = part.get_content()
                            break
                else:
                    body = msg.get_content()
                
                logger.info(f"üìÑ –¢–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {str(body)[:200]}...")
                
                # –ò—â–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
                patterns = [r'(\d{6})', r'–∫–æ–¥.*?(\d{6})', r'verification.*?(\d{6})']
                full_text = subject + " " + str(body)
                
                for pattern in patterns:
                    match = re.search(pattern, full_text, re.IGNORECASE)
                    if match:
                        code = match.group(1)
                        if len(code) == 6:
                            logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ –ø–∏—Å—å–º–µ {i+1}: {code}")
                            mail.quit()
                            return code
            
            mail.quit()
            logger.warning(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {check_count} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞—Ö")
            return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method_name}: {e}")
            if 'mail' in locals():
                try:
                    mail.quit()
                except:
                    pass
            return None

    def get_verification_code_hotmail(self):
        method_name = "Hotmail IMAP"
        logger.info(f"üìß {method_name}: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP
            logger.info(f"üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ imap-mail.outlook.com:{Email.IMAP_PORT}")
            mail = imaplib.IMAP4_SSL('imap-mail.outlook.com', Email.IMAP_PORT)
            
            logger.info("üîë –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...")
            mail.login(self.login, self.password)
            
            logger.info("üìÇ –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É inbox...")
            mail.select("inbox")
            
            # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º
            logger.info("üîç –ò—â–µ–º –ø–∏—Å—å–º–∞...")
            status, messages = mail.search(None, "ALL")
            if status != "OK":
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {status}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º
            message_ids = messages[0].split() if messages[0] else []
            logger.info(f"üìß –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(message_ids)}")
            
            if not message_ids:
                logger.warning("‚ùå –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∏—Å—å–º–∞
            check_count = min(3, len(message_ids))
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {check_count} –ø–∏—Å–µ–º...")
            
            for i in range(check_count):
                email_id = message_ids[-(i+1)]  # –ë–µ—Ä–µ–º —Å –∫–æ–Ω—Ü–∞
                logger.info(f"üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—Å—å–º–æ {i+1}/{check_count}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                status, msg_data = mail.fetch(email_id, "(RFC822)")
                if status != "OK":
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–æ {i+1}")
                    continue
                
                # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                subject = decode_header(msg["Subject"])[0][0]
                if isinstance(subject, bytes):
                    subject = subject.decode()
                
                from_header = msg.get("From", "")
                logger.info(f"üë§ –û—Ç: {from_header}")
                logger.info(f"üìã –¢–µ–º–∞: {subject}")
                
                # –ò—â–µ–º –∫–æ–¥
                patterns = [
                    r"(\d{6})",
                    r"(\d+) is your verification code",
                    r"–∫–æ–¥.*?(\d{6})",
                    r"verification.*?(\d{6})"
                ]
                
                for pattern in patterns:
                    match = re.search(pattern, subject, re.IGNORECASE)
                    if match:
                        code = match.group(1)
                        if len(code) == 6:
                            logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω: {code}")
                            return code
            
            logger.warning(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {check_count} –ø–∏—Å—å–º–∞—Ö")
            return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method_name}: {e}")
            return None
        finally:
            try:
                mail.logout()
                logger.info(f"üîå {method_name}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except:
                pass

    def get_verification_imap_notletters(self):
        method_name = "NotLetters IMAP"
        logger.info(f"üìß {method_name}: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP
            logger.info(f"üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {Email.NOTLETTERS_SERVER}:{Email.NOTLETTERS_PORT}")
            mail = imaplib.IMAP4_SSL(Email.NOTLETTERS_SERVER, Email.NOTLETTERS_PORT)
            
            logger.info("üîë –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...")
            mail.login(self.login, self.password)
            
            logger.info("üìÇ –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É inbox...")
            mail.select("inbox")
            
            # –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º
            logger.info("üîç –ò—â–µ–º –ø–∏—Å—å–º–∞...")
            status, messages = mail.search(None, "ALL")
            if status != "OK":
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {status}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º
            message_ids = messages[0].split() if messages[0] else []
            logger.info(f"üìß –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(message_ids)}")
            
            if not message_ids:
                logger.warning("‚ùå –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∏—Å—å–º–∞
            check_count = min(3, len(message_ids))
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {check_count} –ø–∏—Å–µ–º...")
            
            for i in range(check_count):
                email_id = message_ids[-(i+1)]  # –ë–µ—Ä–µ–º —Å –∫–æ–Ω—Ü–∞
                logger.info(f"üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—Å—å–º–æ {i+1}/{check_count}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                status, msg_data = mail.fetch(email_id, "(RFC822)")
                if status != "OK":
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–æ {i+1}")
                    continue
                
                # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                subject = decode_header(msg["Subject"])[0][0]
                if isinstance(subject, bytes):
                    subject = subject.decode()
                
                from_header = msg.get("From", "")
                logger.info(f"üë§ –û—Ç: {from_header}")
                logger.info(f"üìã –¢–µ–º–∞: {subject}")
                
                # –ò—â–µ–º –∫–æ–¥ –≤ —Ç–µ–º–µ
                match = re.search(r"(\d{6})", subject)
                if match:
                    code = match.group(1)
                    logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–º–µ: {code}")
                    return code
                else:
                    # –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞
                    logger.info("üîç –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞...")
                    pattern = r'(\d{6})'
                    result = re.search(pattern, str(msg))
                    if result:
                        code = result.group(1)
                        logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ: {code}")
                        return code
            
            logger.warning(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {check_count} –ø–∏—Å—å–º–∞—Ö")
            return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method_name}: {e}")
            return None
        finally:
            try:
                mail.logout()
                logger.info(f"üîå {method_name}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except:
                pass
