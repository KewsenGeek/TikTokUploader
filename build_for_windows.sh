#!/bin/bash
# =============================================================================
# –°–ë–û–†–ö–ê DOCKER –û–ë–†–ê–ó–ê –ù–ê MAC –î–õ–Ø WINDOWS –°–ï–†–í–ï–†–ê
# =============================================================================

set -e

echo "üöÄ Starting cross-platform Docker build for Windows deployment..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ Mac
if [[ "$OSTYPE" != "darwin"* ]]; then
    log_warning "This script is optimized for macOS. Current OS: $OSTYPE"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker is not installed or not in PATH"
    exit 1
fi

log_info "Docker version: $(docker --version)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Buildx (–¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏)
if ! docker buildx version &> /dev/null; then
    log_error "Docker Buildx is required for cross-platform builds"
    log_info "Please enable Docker Buildx in Docker Desktop settings"
    exit 1
fi

log_success "Docker Buildx is available"

# –°–æ–∑–¥–∞–µ–º builder instance –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏
BUILDER_NAME="instagram-uploader-builder"

log_info "Setting up cross-platform builder..."
if ! docker buildx ls | grep -q "$BUILDER_NAME"; then
    docker buildx create --name "$BUILDER_NAME" --driver docker-container --bootstrap
    log_success "Created new builder: $BUILDER_NAME"
else
    log_info "Builder $BUILDER_NAME already exists"
fi

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à builder
docker buildx use "$BUILDER_NAME"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
PLATFORMS="linux/amd64"  # Windows Docker –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AMD64
log_info "Target platform: $PLATFORMS"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏
IMAGE_NAME="instagram-uploader"
VERSION="latest"
WINDOWS_TAG="$IMAGE_NAME:windows-$VERSION"

log_info "Building image: $WINDOWS_TAG"
log_info "Target platform: $PLATFORMS"

# –°–±–æ—Ä–∫–∞ –¥–ª—è Windows (AMD64)
log_info "üî® Building Windows-compatible image..."
docker buildx build \
    --platform "$PLATFORMS" \
    --file Dockerfile.windows \
    --tag "$WINDOWS_TAG" \
    --load \
    .

if [ $? -eq 0 ]; then
    log_success "‚úÖ Image built successfully: $WINDOWS_TAG"
else
    log_error "‚ùå Failed to build image"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞
IMAGE_SIZE=$(docker images "$WINDOWS_TAG" --format "table {{.Size}}" | tail -n 1)
log_info "üì¶ Image size: $IMAGE_SIZE"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
log_info "üß™ Testing image..."
if docker run --rm --platform linux/amd64 "$WINDOWS_TAG" python --version; then
    log_success "‚úÖ Image test passed - Python is working"
else
    log_error "‚ùå Image test failed"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Playwright
log_info "üé≠ Testing Playwright installation..."
if docker run --rm --platform linux/amd64 "$WINDOWS_TAG" python -c "import playwright; print('Playwright version:', playwright.__version__)"; then
    log_success "‚úÖ Playwright test passed"
else
    log_warning "‚ö†Ô∏è Playwright test failed - this might be okay if dependencies are missing"
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–µ
log_info "üìã Image information:"
docker inspect "$WINDOWS_TAG" --format='{{.Architecture}}' | while read arch; do
    log_info "  Architecture: $arch"
done

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —ç–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–∑–∞ –≤ tar —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
read -p "üíæ Export image to tar file for manual transfer? (y/N): " export_choice
if [[ $export_choice =~ ^[Yy]$ ]]; then
    TAR_FILE="instagram-uploader-windows.tar"
    log_info "üì¶ Exporting image to $TAR_FILE..."
    docker save "$WINDOWS_TAG" -o "$TAR_FILE"
    log_success "‚úÖ Image exported to $TAR_FILE"
    log_info "üìã Transfer instructions:"
    log_info "  1. Copy $TAR_FILE to your Windows server"
    log_info "  2. Run: docker load -i $TAR_FILE"
    log_info "  3. Run: docker tag $WINDOWS_TAG $IMAGE_NAME:latest"
fi

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Docker Registry
read -p "üöÄ Push to Docker Registry? (y/N): " push_choice
if [[ $push_choice =~ ^[Yy]$ ]]; then
    read -p "Enter Docker Registry URL (or press Enter for Docker Hub): " registry_url
    
    if [ -n "$registry_url" ]; then
        FULL_TAG="$registry_url/$WINDOWS_TAG"
    else
        read -p "Enter Docker Hub username: " docker_username
        FULL_TAG="$docker_username/$WINDOWS_TAG"
    fi
    
    log_info "üè∑Ô∏è Tagging image as: $FULL_TAG"
    docker tag "$WINDOWS_TAG" "$FULL_TAG"
    
    log_info "üöÄ Pushing to registry..."
    docker push "$FULL_TAG"
    
    if [ $? -eq 0 ]; then
        log_success "‚úÖ Image pushed successfully: $FULL_TAG"
        log_info "üìã Windows deployment command:"
        log_info "  docker pull $FULL_TAG"
        log_info "  docker tag $FULL_TAG $IMAGE_NAME:latest"
    else
        log_error "‚ùå Failed to push image"
    fi
fi

log_success "üéâ Cross-platform build completed successfully!"
log_info "üìã Next steps:"
log_info "  1. Test locally: docker run -p 8000:8000 $WINDOWS_TAG"
log_info "  2. Deploy to Windows server using docker-compose.windows.yml"
log_info "  3. Make sure DOLPHIN_API_HOST=http://host.docker.internal:3001 in .env"

echo ""
log_warning "‚ö†Ô∏è Important notes for Windows deployment:"
log_info "  ‚Ä¢ Use docker-compose.windows.yml on Windows server"
log_info "  ‚Ä¢ Set DOLPHIN_API_HOST=http://host.docker.internal:3001"
log_info "  ‚Ä¢ Ensure Dolphin Anty is running on Windows host"
log_info "  ‚Ä¢ Check Windows firewall settings for port 3001" 