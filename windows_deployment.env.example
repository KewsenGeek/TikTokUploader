# =============================================================================
# КОНФИГУРАЦИЯ ДЛЯ WINDOWS СЕРВЕРА
# =============================================================================

# Django настройки
SECRET_KEY=your-super-secret-key-for-production-change-this-immediately
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1,YOUR_WINDOWS_SERVER_IP,YOUR_DOMAIN.com

# Dolphin Anty API (ОБЯЗАТЕЛЬНО!)
# Получите токен из настроек Dolphin Anty на Windows сервере
DOLPHIN_API_TOKEN=your-dolphin-anty-api-token-here

# =============================================================================
# DOLPHIN API HOST - ВЫБЕРИТЕ ОДИН ИЗ ВАРИАНТОВ:
# =============================================================================

# ДЛЯ ПРЯМОГО ЗАПУСКА НА WINDOWS (БЕЗ DOCKER):
# DOLPHIN_API_HOST=http://localhost:3001

# ДЛЯ DOCKER НА WINDOWS:
DOLPHIN_API_HOST=http://host.docker.internal:3001

# Убедитесь что переменная DOCKER_CONTAINER соответствует вашему способу запуска:
# DOCKER_CONTAINER=0  # Для прямого запуска на Windows
# DOCKER_CONTAINER=1  # Для запуска в Docker

# reCAPTCHA решение (РЕКОМЕНДУЕТСЯ)
# Зарегистрируйтесь на https://rucaptcha.com
RUCAPTCHA_API_KEY=your-rucaptcha-api-key-here

# 2FA API (ОПЦИОНАЛЬНО)
# Если используете внешний API для получения 2FA кодов
TFA_API_URL=https://your-2fa-api.com/totp/

# База данных (для PostgreSQL, по умолчанию SQLite)
# DATABASE_URL=postgresql://user:password@localhost/instagram_uploader

# =============================================================================
# НАСТРОЙКИ ДЛЯ WINDOWS СЕРВЕРА
# =============================================================================

# Часовой пояс Windows сервера
TZ=Europe/Moscow

# Максимальное количество параллельных задач (рекомендуется 2-3 для Windows)
MAX_CONCURRENT_TASKS=2

# Пути для Windows (если нужно переопределить)
TEMP_DIR=C:\temp\instagram_uploader
LOGS_DIR=C:\logs\instagram_uploader

# Настройки для работы с Dolphin Anty на Windows
# ⚠️  ВАЖНО: В Docker используйте host.docker.internal вместо localhost
DOLPHIN_PROFILES_PER_BATCH=3

# Playwright настройки для Windows
PLAYWRIGHT_BROWSERS_PATH=/app/browsers
PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=0

# =============================================================================
# БЕЗОПАСНОСТЬ И ПРОИЗВОДИТЕЛЬНОСТЬ
# =============================================================================

# Лимиты ресурсов
MAX_MEMORY_USAGE=4G
MAX_CPU_USAGE=2

# Таймауты (увеличены для Windows сервера)
BROWSER_TIMEOUT=600
PAGE_LOAD_TIMEOUT=60000
ELEMENT_TIMEOUT=15000

# Интервалы между действиями (более консервативные для Windows)
HUMAN_DELAY_MIN=1.0
HUMAN_DELAY_MAX=3.0
ACCOUNT_DELAY_MIN=60
ACCOUNT_DELAY_MAX=180

# Настройки логирования
LOG_LEVEL=INFO
LOG_TO_FILE=True
MAX_LOG_SIZE=100MB

# =============================================================================
# ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ ДЛЯ ПРОДАКШН СРЕДЫ
# =============================================================================

# Email настройки (для уведомлений об ошибках)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password
EMAIL_USE_TLS=True

# Уведомления админу
ADMIN_EMAIL=admin@yourdomain.com

# Backup настройки
BACKUP_ENABLED=True
BACKUP_INTERVAL=24h
BACKUP_PATH=C:\backups\instagram_uploader

# =============================================================================
# TIKTOK API СЕРВЕРЫ - ВЫБОР API СЕРВЕРА ДЛЯ ЗАПРОСОВ
# =============================================================================

# Текущий выбранный API сервер (переопределяет список серверов)
# TIKTOK_API_BASE=http://94.141.161.231:8000

# Список доступных API серверов в формате JSON
# Каждый сервер должен иметь поля: name, url, description
TIKTOK_API_SERVERS=[
  {
    "name": "Primary Server",
    "url": "http://94.141.161.231:8000",
    "description": "Основной сервер для TikTok API"
  },
  {
    "name": "Secondary Server",
    "url": "http://94.141.161.232:8000",
    "description": "Резервный сервер для TikTok API"
  },
  {
    "name": "Local Development",
    "url": "http://localhost:8000",
    "description": "Локальный сервер для разработки"
  },
  {
    "name": "Production Server 1",
    "url": "http://your-production-server-1.com:8000",
    "description": "Первый продакшн сервер"
  },
  {
    "name": "Production Server 2",
    "url": "http://your-production-server-2.com:8000",
    "description": "Второй продакшн сервер"
  }
]

# =============================================================================
# ПРИМЕРЫ КОНФИГУРАЦИИ TIKTOK API СЕРВЕРОВ
# =============================================================================

# Для использования только одного сервера:
# TIKTOK_API_BASE=http://your-single-server.com:8000
# TIKTOK_API_SERVERS=[]

# Для балансировки нагрузки между серверами:
# TIKTOK_API_SERVERS=[
#   {"name": "Load Balancer 1", "url": "http://lb1.example.com:8000", "description": "Первый балансировщик"},
#   {"name": "Load Balancer 2", "url": "http://lb2.example.com:8000", "description": "Второй балансировщик"}
# ]

# Для географически распределенных серверов:
# TIKTOK_API_SERVERS=[
#   {"name": "EU Server", "url": "http://eu.api.tiktok.com:8000", "description": "Европейский сервер"},
#   {"name": "US Server", "url": "http://us.api.tiktok.com:8000", "description": "Американский сервер"},
#   {"name": "ASIA Server", "url": "http://asia.api.tiktok.com:8000", "description": "Азиатский сервер"}
# ]