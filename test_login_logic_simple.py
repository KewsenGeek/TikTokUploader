#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –≤—Ö–æ–¥–∞ –∏ 2FA –±–µ–∑ Django –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ú–æ–∫–∞–µ–º Django –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockModels:
    pass

sys.modules['uploader.models'] = MockModels()

async def test_2fa_api():
    """–¢–µ—Å—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 2FA –∫–æ–¥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 2FA API...")
    
    try:
        import aiohttp
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 2FA –∫–æ–¥–∞
        test_secret = "JBSWY3DPEHPK3PXP"  # –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç
        api_url = f"https://2fa.fb.rip/api/otp/{test_secret}"
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(api_url, timeout=10) as response:
                    if response.status == 200:
                        response_data = await response.json()
                        if response_data.get("ok") and response_data.get("data", {}).get("otp"):
                            code = response_data["data"]["otp"]
                            print(f"[OK] 2FA API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω –∫–æ–¥: {code}")
                            return True
                        else:
                            print(f"[FAIL] 2FA API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_data}")
                            return False
                    else:
                        print(f"[FAIL] 2FA API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return False
            except asyncio.TimeoutError:
                print("[FAIL] 2FA API —Ç–∞–π–º–∞—É—Ç")
                return False
            except Exception as e:
                print(f"[FAIL] –û—à–∏–±–∫–∞ 2FA API: {str(e)}")
                return False
                
    except ImportError:
        print("[FAIL] aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def test_email_client():
    """–¢–µ—Å—Ç Email –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Email –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ email_client
        sys.path.append(os.path.join(os.path.dirname(__file__), 'bot', 'src', 'instagram_uploader'))
        
        try:
            from email_client import Email
            print("[OK] Email –∫–ª–∏–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            test_email = "test@gmail.com"
            test_password = "test_password"
            
            try:
                email_client = Email(test_email, test_password)
                print(f"[OK] Email –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞: {email_client.domain}")
                print(f"[OK] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {email_client.server_config}")
                return True
            except Exception as e:
                print(f"[FAIL] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Email –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
                return False
                
        except ImportError as e:
            print(f"[FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Email –∫–ª–∏–µ–Ω—Ç: {str(e)}")
            return False
            
    except Exception as e:
        print(f"[FAIL] –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Email –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
        return False

def test_verification_keywords():
    """–¢–µ—Å—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
    test_cases = [
        {
            "text": "Enter the 6-digit code from your authenticator app",
            "expected": "authenticator",
            "description": "Authenticator app verification"
        },
        {
            "text": "We sent you a login code. Enter it below to sign in.",
            "expected": "email_code", 
            "description": "Email code verification"
        },
        {
            "text": "Enter your email address to receive a verification code",
            "expected": "email_field",
            "description": "Email field input"
        },
        {
            "text": "Welcome to Instagram",
            "expected": "unknown",
            "description": "No verification required"
        }
    ]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    EMAIL_VERIFICATION_KEYWORDS = [
        'we sent you a login code', '–º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞',
        'login code was sent', '–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'check your email', '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É',
        'sent to your email', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É'
    ]
    
    NON_EMAIL_VERIFICATION_KEYWORDS = [
        'google authenticator', 'authentication app',
        'authenticator app', 'two-factor app'
    ]
    
    CODE_ENTRY_KEYWORDS = [
        'enter the code', '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥',
        'enter the 6-digit code', '–≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥'
    ]
    
    results = []
    for case in test_cases:
        text = case["text"].lower()
        
        is_email_verification = any(keyword in text for keyword in EMAIL_VERIFICATION_KEYWORDS)
        is_code_entry = any(keyword in text for keyword in CODE_ENTRY_KEYWORDS)
        is_non_email = any(keyword in text for keyword in NON_EMAIL_VERIFICATION_KEYWORDS)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        if is_non_email:
            result = "authenticator"
        elif is_email_verification:
            result = "email_code"
        elif "enter your email" in text:
            result = "email_field"
        else:
            result = "unknown"
        
        success = result == case["expected"]
        status = "[OK]" if success else "[FAIL]"
        
        print(f"{status} {case['description']}: {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {case['expected']})")
        results.append(success)
    
    success_rate = sum(results) / len(results) * 100
    print(f"\n–¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {success_rate:.1f}%")
    return success_rate > 75

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ –≤—Ö–æ–¥–∞...\n")
    
    tests = [
        ("2FA API", test_2fa_api()),
        ("Email Client", test_email_client()),
        ("Verification Keywords", test_verification_keywords())
    ]
    
    results = []
    for test_name, test_func in tests:
        if asyncio.iscoroutine(test_func):
            result = await test_func
        else:
            result = test_func
        results.append((test_name, result))
    
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*60)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        print("\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        for test_name, result in results:
            if not result:
                if test_name == "2FA API":
                    print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API https://2fa.fb.rip/api/otp/")
                    print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiohttp: pip install aiohttp")
                elif test_name == "Email Client":
                    print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é email_client")
                    print("- –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                elif test_name == "Verification Keywords":
                    print("- –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    print("- –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

if __name__ == "__main__":
    asyncio.run(main()) 