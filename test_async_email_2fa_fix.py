#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ async –≤–µ—Ä—Å–∏–∏ email/2fa –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from uploader.email_verification_async import determine_verification_type_async
from uploader.bulk_tasks_playwright_async import (
    handle_2fa_async, 
    handle_email_verification_async, 
    handle_email_field_verification_async
)

async def test_determine_verification_type():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ determine_verification_type_async...")
    
    # –°–æ–∑–¥–∞–µ–º mock page –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockPage:
        def __init__(self, content_type="unknown"):
            self.content_type = content_type
            self.url = "https://instagram.com/challenge/"
        
        async def inner_text(self, selector):
            if self.content_type == "authenticator":
                return "Enter the 6-digit code from your authenticator app"
            elif self.content_type == "email_code":
                return "Enter the 6-digit code sent to your email"
            elif self.content_type == "email_field":
                return "Enter your email address to receive a verification code"
            else:
                return "Welcome to Instagram"
        
        async def content(self):
            return f"<html><body>{await self.inner_text('body')}</body></html>"
        
        async def query_selector(self, selector):
            # Mock —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            if "verificationCode" in selector and self.content_type in ["authenticator", "email_code"]:
                return MockElement("input")
            elif "email" in selector and self.content_type == "email_field":
                return MockElement("input")
            return None
    
    class MockElement:
        def __init__(self, element_type):
            self.element_type = element_type
        
        async def is_visible(self):
            return True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    test_cases = [
        ("authenticator", "authenticator"),
        ("email_code", "email_code"), 
        ("email_field", "email_field"),
        ("unknown", "unknown")
    ]
    
    for content_type, expected in test_cases:
        mock_page = MockPage(content_type)
        result = await determine_verification_type_async(mock_page)
        status = "[OK]" if result == expected else "[FAIL]"
        print(f"{status} {content_type} -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")

async def test_verification_handlers():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    class MockPage:
        def __init__(self):
            self.url = "https://instagram.com/challenge/"
        
        async def query_selector(self, selector):
            if "verificationCode" in selector:
                return MockElement("input")
            elif "submit" in selector:
                return MockElement("button")
            return None
    
    class MockElement:
        def __init__(self, element_type):
            self.element_type = element_type
        
        async def is_visible(self):
            return True
        
        async def click(self):
            pass
        
        async def fill(self, text):
            pass
    
    mock_page = MockPage()
    
    # –¢–µ—Å—Ç 2FA –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("[PHONE] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ handle_2fa_async...")
    account_details_2fa = {
        'tfa_secret': 'TEST_SECRET_123'
    }
    result_2fa = await handle_2fa_async(mock_page, account_details_2fa)
    print(f"   2FA —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_2fa}")
    
    # –¢–µ—Å—Ç email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("üìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ handle_email_verification_async...")
    account_details_email = {
        'email_login': 'test@example.com',
        'email_password': 'testpass'
    }
    result_email = await handle_email_verification_async(mock_page, account_details_email)
    print(f"   Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_email}")
    
    # –¢–µ—Å—Ç email field –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("üìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ handle_email_field_verification_async...")
    result_email_field = await handle_email_field_verification_async(mock_page, account_details_email)
    print(f"   Email field —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_email_field}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("[START] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ async email/2fa –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...\n")
    
    try:
        await test_determine_verification_type()
        await test_verification_handlers()
        
        print("\n[OK] –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüìã –†–µ–∑—é–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print("1. [OK] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è check_post_login_verifications_async")
        print("2. [OK] –£–±—Ä–∞–Ω—ã legacy –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ handle_login_completion_async")
        print("3. [OK] –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ determine_verification_type_async")
        print("4. [OK] –§—É–Ω–∫—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")
        print("5. [OK] –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏")
        
    except Exception as e:
        print(f"[FAIL] –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 