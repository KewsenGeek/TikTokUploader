import os
import time
import logging
import asyncio
import requests

logger = logging.getLogger(__name__)


def play_sound_notification():
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"""
    try:
        # –î–ª—è macOS
        os.system("afplay /System/Library/Sounds/Glass.aiff")
    except:
        try:
            # –î–ª—è Linux
            os.system("paplay /usr/share/sounds/freedesktop/stereo/complete.oga")
        except:
            try:
                # –î–ª—è Windows
                os.system("powershell -c '[console]::beep(800,500)'")
            except:
                # Fallback - –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                print("\n" + "üîî" * 10)
                print("üîî CAPTCHA DETECTED - PLEASE SOLVE IT! üîî")
                print("üîî" * 10 + "\n")


def send_captcha_notification_to_dashboard(bulk_upload_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ dashboard –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ dashboard –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–Ω–Ω–µ—Ä–∞
        notification_data = {
            "type": "captcha_detected",
            "message": "CAPTCHA detected! Please solve it manually in the browser.",
            "bulk_upload_id": bulk_upload_id,
            "timestamp": time.time()
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ dashboard
        try:
            response = requests.post(
                f"http://127.0.0.1:8000/api/captcha-notification/", 
                json=notification_data,
                timeout=5
            )
            if response.status_code == 200:
                print(f"üì¢ Captcha notification sent to dashboard for bulk upload {bulk_upload_id}")
            else:
                print(f"‚ö†Ô∏è Failed to send captcha notification: {response.status_code}")
        except requests.exceptions.RequestException:
            # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"üì¢ Captcha detected for bulk upload {bulk_upload_id} - notification logged")
                
    except Exception as e:
        print(f"‚ùå Error sending captcha notification: {e}")


async def detect_recaptcha_on_page_async(page):
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ reCAPTCHA –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    """
    try:
        page_url = page.url
        print(f"üîç Checking for reCAPTCHA on {page_url}")
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–û –î–õ–Ø CHALLENGE-–°–¢–†–ê–ù–ò–¶ INSTAGRAM
        if '/challenge/' in page_url:
            print("üö® Instagram challenge page detected!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Facebook's reCAPTCHA iframe
            try:
                fb_recaptcha_iframe = page.locator('iframe[src*="fbsbx.com/captcha/recaptcha/iframe"]')
                if await fb_recaptcha_iframe.count() > 0:
                    iframe_src = await fb_recaptcha_iframe.first.get_attribute('src')
                    print(f"‚úÖ Found Facebook's reCAPTCHA iframe")
                else:
                    print("‚ö†Ô∏è Facebook's reCAPTCHA iframe not found")
            except Exception as e:
                print(f"‚ö†Ô∏è Error in Facebook's reCAPTCHA detection: {e}")
            
            return {
                "site_key": None,  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
                "page_url": page_url,
                "iframe_present": True,
                "is_invisible": False,
                "is_challenge_page": True,
                "is_facebook_recaptcha": True
            }
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ-challenge —Å—Ç—Ä–∞–Ω–∏—Ü
        return None
        
    except Exception as e:
        print(f"‚ùå Error detecting reCAPTCHA: {str(e)}")
        return None


async def solve_recaptcha_if_present(page, account_details=None, max_attempts=3):
    """
    –†–£–ß–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ reCAPTCHA —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        print("ü§ñ Starting MANUAL reCAPTCHA solving")
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ø—á—É
        captcha_params = await detect_recaptcha_on_page_async(page)
            
        if not captcha_params:
            print("‚úÖ No reCAPTCHA detected")
            return True
        
        page_url = captcha_params.get("page_url")
        is_challenge_page = captcha_params.get("is_challenge_page", False)
        
        print(f"üîç Detected reCAPTCHA:")
        print(f"   - Page URL: {page_url}")
        print(f"   - Challenge Page: {is_challenge_page}")
        
        # –ó–≤—É–∫–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        play_sound_notification()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ dashboard (–µ—Å–ª–∏ –µ—Å—Ç—å bulk_upload_id)
        if account_details and account_details.get("bulk_upload_id"):
            send_captcha_notification_to_dashboard(account_details["bulk_upload_id"])
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π URL –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        initial_url = page.url
        start_time = time.time()
        timeout_seconds = 5 * 60  # 5 –º–∏–Ω—É—Ç
        check_interval_seconds = 30  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        print(f"‚è≥ Waiting for manual solution... (timeout: 5 minutes)")
        print(f"üìã Please solve the reCAPTCHA manually in the browser")
        print(f"üîÑ Will check every {check_interval_seconds} seconds for page change")
        
        check_count = 0
        
        while time.time() - start_time < timeout_seconds:
            check_count += 1
            elapsed_minutes = int((time.time() - start_time) / 60)
            elapsed_seconds = int(time.time() - start_time) % 60
            
            print(f"üîç Check #{check_count} - {elapsed_minutes}m {elapsed_seconds}s elapsed")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL (—É—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
                current_url = page.url
                if current_url != initial_url:
                    print(f"‚úÖ Page URL changed from {initial_url} to {current_url}")
                    print(f"‚úÖ Manual reCAPTCHA solution successful!")
                    return True
            
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                remaining_time = timeout_seconds - (time.time() - start_time)
                remaining_minutes = int(remaining_time / 60)
                remaining_seconds = int(remaining_time % 60)
                
                print(f"‚è≥ Next check in {check_interval_seconds}s (remaining: {remaining_minutes}m {remaining_seconds}s)")
                await page.wait_for_timeout(check_interval_seconds * 1000)
                
            except Exception as e:
                print(f"‚ùå Error during manual captcha check: {e}")
                await page.wait_for_timeout(check_interval_seconds * 1000)
        
        # –¢–∞–π–º–∞—É—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        print(f"‚ùå Manual reCAPTCHA solving timeout after 5 minutes")
        print(f"‚ùå User did not solve the reCAPTCHA in time")
        return False
        
    except Exception as e:
        print(f"‚ùå Error in manual reCAPTCHA solving: {e}")
        return False


async def handle_recaptcha_if_present_async(page, account_details=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ reCAPTCHA –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return await solve_recaptcha_if_present(page, account_details)


# ============================================================================
# –°–ò–ù–•–†–û–ù–ù–´–ï –í–ï–†–°–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# ============================================================================

def detect_recaptcha_on_page(page):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è reCAPTCHA
    """
    try:
        page_url = page.url
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º challenge-—Å—Ç—Ä–∞–Ω–∏—Ü—ã Instagram
        if '/challenge/' in page_url:
            print("üö® Instagram challenge page detected")
            return {
                "site_key": None,  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
                "page_url": page_url,
                "iframe_present": True,
                "is_challenge_page": True
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ reCAPTCHA iframe
        recaptcha_iframe = page.locator('iframe[title*="recaptcha" i], iframe[src*="recaptcha"], iframe[id*="recaptcha"]')
        
        if recaptcha_iframe.count() > 0:
            print("üîç reCAPTCHA iframe detected")
            return {
                "site_key": None,  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
                "page_url": page_url,
                "iframe_present": True,
                "is_challenge_page": False
            }
        
        return None
                            
    except Exception as e:
        print(f"‚ùå Error detecting reCAPTCHA: {str(e)}")
        return None


def solve_recaptcha_if_present_sync(page, account_details=None, max_attempts=3):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è reCAPTCHA
    """
    try:
        print("üîç Starting synchronous reCAPTCHA detection...")
        
        # Detect reCAPTCHA on page
        captcha_params = detect_recaptcha_on_page(page)
        if not captcha_params:
            print("‚ÑπÔ∏è No reCAPTCHA detected on page")
            return True  # No captcha to solve
        
        page_url = captcha_params.get('page_url')
        is_challenge_page = captcha_params.get('is_challenge_page', False)
        
        print(f"üîß reCAPTCHA detected on: {page_url}")
        print(f"üîß Challenge page: {is_challenge_page}")
        
        # –ó–≤—É–∫–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        play_sound_notification()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ dashboard (–µ—Å–ª–∏ –µ—Å—Ç—å bulk_upload_id)
        if account_details and account_details.get("bulk_upload_id"):
            send_captcha_notification_to_dashboard(account_details["bulk_upload_id"])
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π URL –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        initial_url = page.url
        start_time = time.time()
        timeout_seconds = 5 * 60  # 5 –º–∏–Ω—É—Ç
        check_interval_seconds = 30  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        print(f"‚è≥ Waiting for manual solution... (timeout: 5 minutes)")
        print(f"üìã Please solve the reCAPTCHA manually in the browser")
        print(f"üîÑ Will check every {check_interval_seconds} seconds for page change")
        
        check_count = 0
        
        while time.time() - start_time < timeout_seconds:
            check_count += 1
            elapsed_minutes = int((time.time() - start_time) / 60)
            elapsed_seconds = int(time.time() - start_time) % 60
            
            print(f"üîç Check #{check_count} - {elapsed_minutes}m {elapsed_seconds}s elapsed")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL (—É—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
                current_url = page.url
                if current_url != initial_url:
                    print(f"‚úÖ Page URL changed from {initial_url} to {current_url}")
                    print(f"‚úÖ Manual reCAPTCHA solution successful!")
                    return True
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                remaining_time = timeout_seconds - (time.time() - start_time)
                remaining_minutes = int(remaining_time / 60)
                remaining_seconds = int(remaining_time % 60)
                
                print(f"‚è≥ Next check in {check_interval_seconds}s (remaining: {remaining_minutes}m {remaining_seconds}s)")
                time.sleep(check_interval_seconds)
                        
            except Exception as e:
                print(f"‚ùå Error during manual captcha check: {e}")
                time.sleep(check_interval_seconds)
        
        # –¢–∞–π–º–∞—É—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        print(f"‚ùå Manual reCAPTCHA solving timeout after 5 minutes")
        print(f"‚ùå User did not solve the reCAPTCHA in time")
        return False
        
    except Exception as e:
        print(f"‚ùå Unexpected error in sync reCAPTCHA solving: {e}")
        return False

