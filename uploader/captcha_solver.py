import os
import time
import requests
import logging
from django.conf import settings

logger = logging.getLogger(__name__)

class RuCaptchaSolver:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è reCAPTCHA v2 —á–µ—Ä–µ–∑ ruCAPTCHA API
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://rucaptcha.com/api-docs/recaptcha-v2
    """
    
    def __init__(self, api_key=None):
        self.api_key = api_key or os.environ.get('RUCAPTCHA_API_KEY') or os.environ.get('CAPTCHA_API_KEY')
        self.base_url = "https://rucaptcha.com"
        self.create_task_url = f"{self.base_url}/createTask"
        self.get_result_url = f"{self.base_url}/getTaskResult"
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è No reCAPTCHA API key found. Set RUCAPTCHA_API_KEY environment variable")
    
    def solve_recaptcha_v2(self, site_key, page_url, proxy=None, user_agent=None, cookies=None, timeout=120):
        """
        –†–µ—à–∏—Ç—å reCAPTCHA v2
        
        Args:
            site_key (str): –ö–ª—é—á —Å–∞–π—Ç–∞ reCAPTCHA (data-sitekey)
            page_url (str): URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–∞–ø—á–µ–π
            proxy (dict): –ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"type": "http", "host": "...", "port": ..., "login": "...", "password": "..."}
            user_agent (str): User-Agent –±—Ä–∞—É–∑–µ—Ä–∞
            cookies (str): –ö—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "key1=val1; key2=val2"
            timeout (int): –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            str: –¢–æ–∫–µ–Ω —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        
        if not self.api_key:
            logger.error("‚ùå reCAPTCHA API key not configured")
            return None
        
        logger.info(f"ü§ñ Starting reCAPTCHA v2 solving for {page_url}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_id = self._create_task(site_key, page_url, proxy, user_agent, cookies)
        if not task_id:
            return None
        
        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        return self._wait_for_result(task_id, timeout)
    
    def _create_task(self, site_key, page_url, proxy=None, user_agent=None, cookies=None):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        task_data = {
            "type": "RecaptchaV2TaskProxyless" if not proxy else "RecaptchaV2Task",
            "websiteURL": page_url,
            "websiteKey": site_key
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if user_agent:
            task_data["userAgent"] = user_agent
            logger.info(f"üåê Added User-Agent to task: {user_agent[:80]}{'...' if len(user_agent) > 80 else ''}")
            
        if cookies:
            task_data["cookies"] = cookies
            cookie_preview = cookies[:100] + ('...' if len(cookies) > 100 else '')
            logger.info(f"üç™ Added cookies to task: {cookie_preview}")
            
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏
        if proxy:
            task_data.update({
                "proxyType": proxy.get("type", "http"),
                "proxyAddress": proxy["host"],
                "proxyPort": proxy["port"]
            })
            
            if proxy.get("login"):
                task_data["proxyLogin"] = proxy["login"]
            if proxy.get("password"):
                task_data["proxyPassword"] = proxy["password"]
            
            logger.info(f"üîí Added proxy to task: {proxy['host']}:{proxy['port']} (type: {proxy.get('type', 'http')})")
        else:
            logger.info("‚ö†Ô∏è No proxy added to task - using direct connection")
        
        # –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        payload = {
            "clientKey": self.api_key,
            "task": task_data
        }
        
        try:
            logger.info(f"üì§ Sending task to ruCAPTCHA: {task_data['type']}")
            response = requests.post(self.create_task_url, json=payload, timeout=30)
            result = response.json()
            
            if result.get("errorId") == 0:
                task_id = result.get("taskId")
                logger.info(f"‚úÖ Task created successfully. Task ID: {task_id}")
                return task_id
            else:
                logger.error(f"‚ùå Failed to create task: {result.get('errorDescription', 'Unknown error')}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error creating captcha task: {str(e)}")
            return None
    
    def _wait_for_result(self, task_id, timeout=120):
        """–û–∂–∏–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
        
        start_time = time.time()
        check_interval = 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        logger.info(f"‚è≥ Waiting for captcha solution (timeout: {timeout}s)")
        
        while time.time() - start_time < timeout:
            try:
                payload = {
                    "clientKey": self.api_key,
                    "taskId": task_id
                }
                
                response = requests.post(self.get_result_url, json=payload, timeout=30)
                result = response.json()
                
                if result.get("errorId") == 0:
                    if result.get("status") == "ready":
                        solution = result.get("solution", {}).get("gRecaptchaResponse")
                        if solution:
                            logger.info("‚úÖ Captcha solved successfully!")
                            return solution
                        else:
                            logger.error("‚ùå No solution in response")
                            return None
                    
                    elif result.get("status") == "processing":
                        elapsed = int(time.time() - start_time)
                        logger.info(f"‚è≥ Still processing... ({elapsed}s elapsed)")
                        time.sleep(check_interval)
                        continue
                    
                    else:
                        logger.error(f"‚ùå Unexpected status: {result.get('status')}")
                        return None
                
                else:
                    logger.error(f"‚ùå Error getting result: {result.get('errorDescription', 'Unknown error')}")
                    return None
                    
            except Exception as e:
                logger.error(f"‚ùå Error checking captcha result: {str(e)}")
                time.sleep(check_interval)
                continue
        
        logger.error(f"‚ùå Captcha solving timeout ({timeout}s)")
        return None
    
    def get_balance(self):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.api_key:
            return None
        
        try:
            payload = {"clientKey": self.api_key}
            response = requests.post(f"{self.base_url}/getBalance", json=payload, timeout=10)
            result = response.json()
            
            if result.get("errorId") == 0:
                balance = result.get("balance", 0)
                logger.info(f"üí∞ ruCAPTCHA balance: ${balance}")
                return balance
            else:
                logger.error(f"‚ùå Error getting balance: {result.get('errorDescription')}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error checking balance: {str(e)}")
            return None


def detect_recaptcha_on_page(page):
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ reCAPTCHA –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    
    Args:
        page: Playwright page object
        
    Returns:
        dict: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ø—á–∏ –∏–ª–∏ None –µ—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ iframe —Å reCAPTCHA
        recaptcha_iframe = page.locator('iframe[title*="recaptcha" i], iframe[src*="recaptcha"], iframe[id*="recaptcha"], iframe[title*="Google Recaptcha"]').first
        
        if recaptcha_iframe.count() > 0:
            logger.info("üîç reCAPTCHA iframe detected")
            
            # –ü–æ–ª—É—á–∞–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_url = page.url
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ sitekey —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            site_key = None
            
            # –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ data-sitekey –∞—Ç—Ä–∏–±—É—Ç
            try:
                sitekey_element = page.locator('[data-sitekey]').first
                if sitekey_element.count() > 0:
                    site_key = sitekey_element.get_attribute('data-sitekey')
                    logger.info(f"‚úÖ Found sitekey via data-sitekey: {site_key}")
            except:
                pass
            
            # –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ –≤ iframe src
            if not site_key:
                try:
                    iframe_src = recaptcha_iframe.get_attribute('src')
                    if iframe_src and 'recaptcha' in iframe_src.lower():
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å sitekey –∏–∑ URL
                        import re
                        match = re.search(r'[?&]k=([^&]+)', iframe_src)
                        if match:
                            site_key = match.group(1)
                            logger.info(f"‚úÖ Found sitekey in iframe src: {site_key}")
                except:
                    pass
            
            # –°–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ window.recaptcha
            if not site_key:
                try:
                    site_key = page.evaluate("""() => {
                        // –ò—â–µ–º –≤ window –æ–±—ä–µ–∫—Ç–∞—Ö
                        if (window.grecaptcha && window.grecaptcha.render) {
                            const elements = document.querySelectorAll('[data-sitekey]');
                            for (let el of elements) {
                                return el.getAttribute('data-sitekey');
                            }
                        }
                        
                        // –ò—â–µ–º –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
                        const scripts = document.querySelectorAll('script');
                        for (let script of scripts) {
                            const match = script.innerHTML.match(/['"](6[a-zA-Z0-9_-]{39})['"]/);
                            if (match) return match[1];
                        }
                        
                        return null;
                    }""")
                    if site_key:
                        logger.info(f"‚úÖ Found sitekey via JavaScript: {site_key}")
                except:
                    pass
            
            # –°–ø–æ—Å–æ–± 4: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á Instagram
            if not site_key:
                # Instagram —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏
                instagram_sitekeys = [
                    "6LfI9gcTAAAAAJz0P5ALAU4K4-kCpB9PBKH9q3Zu",  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á Instagram
                    "6Le_ZMEZAAAAAKGCeFBjgKYRaJ5tIwjh6e-vgKA-",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
                ]
                
                for test_key in instagram_sitekeys:
                    site_key = test_key
                    logger.info(f"üîß Using known Instagram sitekey: {site_key}")
                    break
            
            if not site_key:
                logger.error("‚ùå Could not find reCAPTCHA sitekey")
                return None
            
            return {
                "site_key": site_key,
                "page_url": page_url,
                "iframe_present": True
            }
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Error detecting reCAPTCHA: {str(e)}")
        return None


async def solve_recaptcha_if_present(page, account_details=None, max_attempts=3):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ reCAPTCHA –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ —Ä–µ—à–∏—Ç—å –µ—ë –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞
    
    Args:
        page: Playwright page object
        account_details: –î–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –ø—Ä–æ–∫—Å–∏ –∏ user-agent)
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, False –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å
    """
    
    for attempt in range(max_attempts):
        try:
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await page.wait_for_timeout(2000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–ø—á–∏
            captcha_params = detect_recaptcha_on_page(page)
            
            if not captcha_params:
                logger.info("‚úÖ No reCAPTCHA detected")
                return True
            
            logger.info(f"ü§ñ reCAPTCHA detected, attempting to solve (attempt {attempt + 1}/{max_attempts})")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–∞—Ç–µ–ª—å –∫–∞–ø—á–∏
            solver = RuCaptchaSolver()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            user_agent = None
            proxy = None
            cookies = None
            
            if account_details:
                # User-Agent –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ (Dolphin –ø—Ä–æ—Ñ–∏–ª—è)
                user_agent = await page.evaluate('navigator.userAgent')
                logger.info(f"üåê Using User-Agent from Dolphin profile: {user_agent[:100]}{'...' if len(user_agent) > 100 else ''}")
                
                # –ü—Ä–æ–∫—Å–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                if account_details.get("proxy"):
                    proxy_data = account_details["proxy"]
                    proxy = {
                        "type": proxy_data.get("type", "http").lower(),
                        "host": proxy_data.get("host"),
                        "port": proxy_data.get("port"),
                        "login": proxy_data.get("user"),
                        "password": proxy_data.get("pass")
                    }
                    logger.info(f"üîí Using proxy for reCAPTCHA: {proxy['host']}:{proxy['port']} (type: {proxy['type']})")
                else:
                    logger.info("‚ö†Ô∏è No proxy found in account_details for reCAPTCHA solving")
                
                # –ö—É–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ (Dolphin –ø—Ä–æ—Ñ–∏–ª—è)
                try:
                    page_cookies = await page.context.cookies()
                    if page_cookies:
                        cookies = "; ".join([f"{c['name']}={c['value']}" for c in page_cookies])
                        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫ –∏ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                        cookie_count = len(page_cookies)
                        sample_cookies = [f"{c['name']}={c['value'][:10]}..." for c in page_cookies[:3]]
                        logger.info(f"üç™ Using {cookie_count} cookies from Dolphin profile: {', '.join(sample_cookies)}")
                    else:
                        logger.info("‚ö†Ô∏è No cookies found in Dolphin profile")
                        cookies = None
                except Exception as cookie_error:
                    logger.warning(f"‚ö†Ô∏è Error extracting cookies from Dolphin profile: {str(cookie_error)}")
                    cookies = None
            
            # –†–µ—à–∞–µ–º –∫–∞–ø—á—É
            solution = solver.solve_recaptcha_v2(
                site_key=captcha_params["site_key"],
                page_url=captcha_params["page_url"],
                proxy=proxy,
                user_agent=user_agent,
                cookies=cookies,
                timeout=180  # 3 –º–∏–Ω—É—Ç—ã
            )
            
            if not solution:
                logger.error(f"‚ùå Failed to solve reCAPTCHA (attempt {attempt + 1})")
                if attempt < max_attempts - 1:
                    await page.wait_for_timeout(5000)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                continue
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            success = await _inject_captcha_solution(page, solution)
            
            if success:
                logger.info("‚úÖ reCAPTCHA solved and injected successfully")
                return True
            else:
                logger.error(f"‚ùå Failed to inject solution (attempt {attempt + 1})")
                if attempt < max_attempts - 1:
                    await page.wait_for_timeout(5000)
                continue
                
        except Exception as e:
            logger.error(f"‚ùå Error solving reCAPTCHA (attempt {attempt + 1}): {str(e)}")
            if attempt < max_attempts - 1:
                await page.wait_for_timeout(5000)
            continue
    
    logger.error("‚ùå Failed to solve reCAPTCHA after all attempts")
    return False


async def _inject_captcha_solution(page, solution):
    """–í—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    try:
        logger.info("üíâ Injecting reCAPTCHA solution into page")
        
        # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ g-recaptcha-response —ç–ª–µ–º–µ–Ω—Ç
        success = await page.evaluate(f"""(solution) => {{
            try {{
                // –ù–∞–π—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
                const responseField = document.querySelector('#g-recaptcha-response') || 
                                    document.querySelector('[name="g-recaptcha-response"]') ||
                                    document.querySelector('#recaptcha-input') ||
                                    document.querySelector('input[type="hidden"][id*="recaptcha"]');
                
                if (responseField) {{
                    responseField.value = solution;
                    responseField.style.display = 'block';
                    console.log('‚úÖ Solution injected into response field');
                    
                    // Trigger events
                    responseField.dispatchEvent(new Event('change', {{ bubbles: true }}));
                    responseField.dispatchEvent(new Event('input', {{ bubbles: true }}));
                    
                    return true;
                }}
                
                return false;
            }} catch (e) {{
                console.error('Error injecting solution:', e);
                return false;
            }}
        }}""", solution)
        
        if success:
            # –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ window.grecaptcha callback
            await page.evaluate(f"""(solution) => {{
                try {{
                    if (window.grecaptcha && window.grecaptcha.getResponse) {{
                        // –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ grecaptcha API
                        const widgets = document.querySelectorAll('[data-sitekey]');
                        for (let widget of widgets) {{
                            const widgetId = widget.getAttribute('data-widget-id');
                            if (widgetId !== null) {{
                                window.grecaptcha.reset(widgetId);
                                // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                                if (widget.getAttribute('data-callback')) {{
                                    const callback = window[widget.getAttribute('data-callback')];
                                    if (typeof callback === 'function') {{
                                        callback(solution);
                                    }}
                                }}
                            }}
                        }}
                    }}
                    
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
                    const submitButtons = document.querySelectorAll('button[disabled], [aria-disabled="true"]');
                    for (let btn of submitButtons) {{
                        btn.removeAttribute('disabled');
                        btn.removeAttribute('aria-disabled');
                        btn.style.pointerEvents = 'auto';
                        if (btn.style.background && btn.style.background.includes('rgba')) {{
                            btn.style.background = btn.style.background.replace(/rgba\\([^,]+,[^,]+,[^,]+,[^)]+\\)/g, 'rgb(0, 149, 246)');
                        }}
                    }}
                    
                    console.log('‚úÖ Solution processed');
                    return true;
                }} catch (e) {{
                    console.error('Error in callback processing:', e);
                    return false;
                }}
            }}""", solution)
        
        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        await page.wait_for_timeout(2000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
        next_button = page.locator('button:has-text("–î–∞–ª–µ–µ"), [role="button"]:has-text("–î–∞–ª–µ–µ"), [aria-label="–î–∞–ª–µ–µ"]').first
        
        if next_button.count() > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
            is_enabled = await next_button.evaluate('''el => {
                return !el.hasAttribute('disabled') && 
                       el.getAttribute('aria-disabled') !== 'true' &&
                       el.style.pointerEvents !== 'none';
            }''')
            
            if is_enabled:
                logger.info("‚úÖ Captcha solved - Next button is now enabled")
                
                # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                await next_button.click()
                await page.wait_for_timeout(3000)
                
                return True
            else:
                logger.warning("‚ö†Ô∏è Solution injected but button still disabled")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Error injecting captcha solution: {str(e)}")
        return False


def solve_recaptcha_if_present_sync(page, account_details=None, max_attempts=3):
    """
    Synchronous version of solve_recaptcha_if_present
    Detects and solves reCAPTCHA v2 if present on the page
    """
    try:
        logger.info("üîç Starting synchronous reCAPTCHA detection...")
        
        # Check if reCAPTCHA API key is available
        api_key = os.environ.get('RUCAPTCHA_API_KEY') or os.environ.get('CAPTCHA_API_KEY')
        if not api_key:
            logger.warning("‚ö†Ô∏è No reCAPTCHA API key found - skipping captcha solving")
            return False
        
        # Detect reCAPTCHA on page
        captcha_params = detect_recaptcha_on_page(page)
        if not captcha_params:
            logger.info("‚ÑπÔ∏è No reCAPTCHA detected on page")
            return True  # No captcha to solve
        
        site_key = captcha_params.get('site_key')
        if not site_key:
            logger.warning("‚ö†Ô∏è reCAPTCHA detected but no sitekey found")
            return False
        
        logger.info(f"üîß reCAPTCHA detected with sitekey: {site_key}")
        
        # Initialize solver
        solver = RuCaptchaSolver(api_key)
        current_url = page.url
        
        # Prepare additional parameters
        user_agent = None
        cookies = None
        proxy = None
        
        try:
            # Get User-Agent from current browser
            user_agent = page.evaluate('navigator.userAgent')
            logger.info(f"üåê Using User-Agent from browser: {user_agent[:100]}{'...' if len(user_agent) > 100 else ''}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not get User-Agent: {e}")
        
        try:
            # Get cookies from current context
            cookies_list = page.context.cookies()
            if cookies_list:
                cookies = "; ".join([f"{cookie['name']}={cookie['value']}" for cookie in cookies_list])
                logger.info(f"üç™ Using {len(cookies_list)} cookies from browser context")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not get cookies: {e}")
        
        # Get proxy from account_details if available
        if account_details and account_details.get("proxy"):
            proxy_data = account_details["proxy"]
            proxy = {
                "type": proxy_data.get("type", "http").lower(),
                "host": proxy_data.get("host"),
                "port": proxy_data.get("port"),
                "login": proxy_data.get("user"),
                "password": proxy_data.get("pass")
            }
            logger.info(f"üîí Using proxy for reCAPTCHA: {proxy['host']}:{proxy['port']}")
        
        # Attempt to solve reCAPTCHA
        for attempt in range(max_attempts):
            try:
                logger.info(f"üöÄ reCAPTCHA solving attempt {attempt + 1}/{max_attempts}")
                
                # Solve the captcha using the correct method name
                solution = solver.solve_recaptcha_v2(
                    site_key=site_key,
                    page_url=current_url,
                    user_agent=user_agent,
                    cookies=cookies,
                    proxy=proxy
                )
                
                if solution:
                    logger.info("‚úÖ reCAPTCHA solved successfully, injecting solution...")
                    
                    # Inject solution into page
                    success = inject_captcha_solution_sync(page, solution)
                    
                    if success:
                        logger.info("‚úÖ reCAPTCHA solution injected successfully")
                        return True
                    else:
                        logger.error("‚ùå Failed to inject reCAPTCHA solution")
                        if attempt < max_attempts - 1:
                            logger.info(f"üîÑ Retrying... (attempt {attempt + 2}/{max_attempts})")
                            continue
                else:
                    logger.error(f"‚ùå Failed to solve reCAPTCHA (attempt {attempt + 1})")
                    if attempt < max_attempts - 1:
                        logger.info(f"üîÑ Retrying... (attempt {attempt + 2}/{max_attempts})")
                        continue
                        
            except Exception as e:
                logger.error(f"‚ùå Error during reCAPTCHA solving attempt {attempt + 1}: {e}")
                if attempt < max_attempts - 1:
                    logger.info(f"üîÑ Retrying... (attempt {attempt + 2}/{max_attempts})")
                    continue
        
        logger.error(f"‚ùå Failed to solve reCAPTCHA after {max_attempts} attempts")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Unexpected error in sync reCAPTCHA solving: {e}")
        return False

def inject_captcha_solution_sync(page, solution):
    """
    Synchronous version of solution injection
    Inject reCAPTCHA solution into the page
    """
    try:
        logger.info("üíâ Injecting reCAPTCHA solution into page...")
        
        # Method 1: Direct callback execution
        try:
            logger.info("üéØ Trying direct callback execution...")
            result = page.evaluate(f"""
                () => {{
                    if (window.grecaptcha && window.grecaptcha.getResponse) {{
                        // Find the reCAPTCHA widget
                        const captchaElements = document.querySelectorAll('[data-sitekey]');
                        if (captchaElements.length > 0) {{
                            // Execute callback with solution
                            if (window.___grecaptcha_cfg && window.___grecaptcha_cfg.clients) {{
                                Object.keys(window.___grecaptcha_cfg.clients).forEach(key => {{
                                    const client = window.___grecaptcha_cfg.clients[key];
                                    if (client && client.callback) {{
                                        client.callback('{solution}');
                                    }}
                                }});
                                return true;
                            }}
                        }}
                    }}
                    return false;
                }}
            """)
            
            if result:
                logger.info("‚úÖ Direct callback execution successful")
                time.sleep(2)  # Wait for page to process
                return True
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Direct callback failed: {e}")
        
        # Method 2: Textarea injection
        try:
            logger.info("üéØ Trying textarea injection...")
            result = page.evaluate(f"""
                () => {{
                    const textarea = document.querySelector('textarea[name="g-recaptcha-response"]');
                    if (textarea) {{
                        textarea.style.display = 'block';
                        textarea.value = '{solution}';
                        
                        // Trigger events
                        textarea.dispatchEvent(new Event('input', {{ bubbles: true }}));
                        textarea.dispatchEvent(new Event('change', {{ bubbles: true }}));
                        
                        // Hide it again
                        setTimeout(() => {{ textarea.style.display = 'none'; }}, 100);
                        return true;
                    }}
                    return false;
                }}
            """)
            
            if result:
                logger.info("‚úÖ Textarea injection successful")
                time.sleep(2)
                return True
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Textarea injection failed: {e}")
        
        # Method 3: Global variable injection
        try:
            logger.info("üéØ Trying global variable injection...")
            page.evaluate(f"""
                () => {{
                    window.recaptchaSolution = '{solution}';
                    window.dispatchEvent(new CustomEvent('recaptchaSolved', {{
                        detail: {{ solution: '{solution}' }}
                    }}));
                }}
            """)
            
            logger.info("‚úÖ Global variable injection completed")
            time.sleep(2)
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Global variable injection failed: {e}")
        
        logger.error("‚ùå All injection methods failed")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Error injecting reCAPTCHA solution: {e}")
        return False 