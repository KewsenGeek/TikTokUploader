# Generated by Django 5.1.5 on 2025-10-03 21:38

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cabinet', '0005_calculationhistory_client_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='BulkUploadTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название задачи', max_length=200)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('PAUSED', 'Paused')], default='PENDING', max_length=20)),
                ('delay_min_sec', models.IntegerField(default=30, help_text='Минимальная задержка между загрузками (сек)')),
                ('delay_max_sec', models.IntegerField(default=60, help_text='Максимальная задержка между загрузками (сек)')),
                ('concurrency', models.IntegerField(default=1, help_text='Количество параллельных загрузок')),
                ('default_caption', models.TextField(blank=True, default='', help_text='Описание по умолчанию')),
                ('default_hashtags', models.TextField(blank=True, default='', help_text='Хештеги по умолчанию (через запятую)')),
                ('default_privacy', models.CharField(choices=[('PUBLIC', 'Public'), ('FRIENDS', 'Friends'), ('PRIVATE', 'Private')], default='PUBLIC', max_length=20)),
                ('allow_comments', models.BooleanField(default=True)),
                ('allow_duet', models.BooleanField(default=True)),
                ('allow_stitch', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('log', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Bulk Upload Task',
                'verbose_name_plural': 'Bulk Upload Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CookieRobotTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Cookie Robot Task', max_length=120)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('delay_min_sec', models.IntegerField(default=10)),
                ('delay_max_sec', models.IntegerField(default=30)),
                ('concurrency', models.IntegerField(default=2)),
                ('log', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Cookie Robot Task',
                'verbose_name_plural': 'Cookie Robot Tasks',
            },
        ),
        migrations.CreateModel(
            name='FollowCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Follow Category',
                'verbose_name_plural': 'Follow Categories',
            },
        ),
        migrations.CreateModel(
            name='WarmupTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Warmup Task', max_length=120)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('delay_min_sec', models.IntegerField(default=15)),
                ('delay_max_sec', models.IntegerField(default=45)),
                ('concurrency', models.IntegerField(default=1, help_text='Максимум 4')),
                ('feed_scroll_min_count', models.IntegerField(default=5, help_text='Минимум прокруток ленты')),
                ('feed_scroll_max_count', models.IntegerField(default=15, help_text='Максимум прокруток ленты')),
                ('like_min_count', models.IntegerField(default=3, help_text='Минимум лайков')),
                ('like_max_count', models.IntegerField(default=10, help_text='Максимум лайков')),
                ('watch_video_min_count', models.IntegerField(default=5, help_text='Минимум просмотров видео')),
                ('watch_video_max_count', models.IntegerField(default=20, help_text='Максимум просмотров видео')),
                ('follow_min_count', models.IntegerField(default=0, help_text='Минимум подписок')),
                ('follow_max_count', models.IntegerField(default=5, help_text='Максимум подписок')),
                ('comment_min_count', models.IntegerField(default=0, help_text='Минимум комментариев')),
                ('comment_max_count', models.IntegerField(default=3, help_text='Максимум комментариев')),
                ('log', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Warmup Task',
                'verbose_name_plural': 'Warmup Tasks',
            },
        ),
        migrations.CreateModel(
            name='BulkUploadAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('uploaded_success_count', models.IntegerField(default=0)),
                ('uploaded_failed_count', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('log', models.TextField(blank=True, default='')),
                ('bulk_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='tiktok_uploader.bulkuploadtask')),
            ],
            options={
                'verbose_name': 'Bulk Upload Account',
                'verbose_name_plural': 'Bulk Upload Accounts',
            },
        ),
        migrations.CreateModel(
            name='BulkVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_file', models.FileField(upload_to='tiktok/bulk_videos/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(default=0)),
                ('uploaded', models.BooleanField(default=False)),
                ('caption', models.TextField(blank=True, default='', help_text='Описание видео')),
                ('hashtags', models.TextField(blank=True, default='', help_text='Хештеги (через запятую)')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_videos', to='tiktok_uploader.bulkuploadaccount')),
                ('bulk_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='tiktok_uploader.bulkuploadtask')),
            ],
            options={
                'verbose_name': 'Bulk Video',
                'verbose_name_plural': 'Bulk Videos',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='FollowTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Follow Task', max_length=120)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('action', models.CharField(choices=[('FOLLOW', 'Follow'), ('UNFOLLOW', 'Unfollow')], default='FOLLOW', max_length=20)),
                ('delay_min_sec', models.IntegerField(default=30)),
                ('delay_max_sec', models.IntegerField(default=60)),
                ('concurrency', models.IntegerField(default=1)),
                ('follow_min_count', models.IntegerField(default=10, help_text='Минимум подписок на аккаунт')),
                ('follow_max_count', models.IntegerField(default=50, help_text='Максимум подписок на аккаунт')),
                ('log', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='follow_tasks', to='tiktok_uploader.followcategory')),
            ],
            options={
                'verbose_name': 'Follow Task',
                'verbose_name_plural': 'Follow Tasks',
            },
        ),
        migrations.CreateModel(
            name='TikTokAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('email_password', models.CharField(blank=True, max_length=100, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=32, null=True)),
                ('dolphin_profile_id', models.CharField(blank=True, help_text='Dolphin Anty browser profile ID', max_length=100, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('BLOCKED', 'Blocked'), ('LIMITED', 'Limited'), ('INACTIVE', 'Inactive'), ('PHONE_VERIFICATION_REQUIRED', 'Phone Verification Required'), ('CAPTCHA_REQUIRED', 'Captcha Required'), ('SUSPENDED', 'Suspended')], default='ACTIVE', max_length=30)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('last_warmed', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, default='')),
                ('locale', models.CharField(default='en_US', help_text='Locale, e.g. en_US, ru_RU, es_ES', max_length=5)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tiktok_accounts', to='cabinet.client')),
            ],
            options={
                'verbose_name': 'TikTok Account',
                'verbose_name_plural': 'TikTok Accounts',
            },
        ),
        migrations.CreateModel(
            name='DolphinProfileSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_id', models.CharField(db_index=True, max_length=100)),
                ('payload_json', models.JSONField()),
                ('response_json', models.JSONField()),
                ('meta_json', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dolphin_snapshot', to='tiktok_uploader.tiktokaccount')),
            ],
            options={
                'verbose_name': 'Dolphin Profile Snapshot',
                'verbose_name_plural': 'Dolphin Profile Snapshots',
            },
        ),
        migrations.AddField(
            model_name='bulkuploadaccount',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bulk_uploads', to='tiktok_uploader.tiktokaccount'),
        ),
        migrations.CreateModel(
            name='TikTokProxy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(help_text='Proxy host (IP address or domain name)', max_length=255)),
                ('port', models.IntegerField()),
                ('username', models.CharField(blank=True, max_length=200, null=True)),
                ('password', models.CharField(blank=True, max_length=200, null=True)),
                ('proxy_type', models.CharField(choices=[('HTTP', 'HTTP'), ('SOCKS5', 'SOCKS5'), ('HTTPS', 'HTTPS')], default='HTTP', max_length=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('banned', 'Banned'), ('checking', 'Checking')], default='inactive', max_length=20)),
                ('last_checked', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('last_verified', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, default='')),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('ip_change_url', models.URLField(blank=True, help_text='URL для смены IP-адреса прокси', max_length=500, null=True)),
                ('external_ip', models.GenericIPAddressField(blank=True, help_text='Внешний IP-адрес при использовании прокси', null=True)),
            ],
            options={
                'verbose_name': 'TikTok Proxy',
                'verbose_name_plural': 'TikTok Proxies',
                'unique_together': {('host', 'port', 'username', 'password')},
            },
        ),
        migrations.AddField(
            model_name='tiktokaccount',
            name='current_proxy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='active_accounts', to='tiktok_uploader.tiktokproxy'),
        ),
        migrations.AddField(
            model_name='tiktokaccount',
            name='proxy',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts', to='tiktok_uploader.tiktokproxy'),
        ),
        migrations.CreateModel(
            name='VideoCaption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('order', models.IntegerField(default=0)),
                ('assigned_to', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_caption', to='tiktok_uploader.bulkvideo')),
                ('bulk_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='captions', to='tiktok_uploader.bulkuploadtask')),
            ],
            options={
                'verbose_name': 'Video Caption',
                'verbose_name_plural': 'Video Captions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='FollowTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='TikTok username (без @)', max_length=100)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='tiktok_uploader.followcategory')),
            ],
            options={
                'verbose_name': 'Follow Target',
                'verbose_name_plural': 'Follow Targets',
                'unique_together': {('category', 'username')},
            },
        ),
        migrations.CreateModel(
            name='FollowTaskAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('follow_count', models.IntegerField(default=0)),
                ('log', models.TextField(blank=True, default='')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='tiktok_uploader.followtask')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_tasks', to='tiktok_uploader.tiktokaccount')),
            ],
            options={
                'verbose_name': 'Follow Task Account',
                'verbose_name_plural': 'Follow Task Accounts',
                'unique_together': {('task', 'account')},
            },
        ),
        migrations.CreateModel(
            name='CookieRobotTaskAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('cookies_json', models.JSONField(blank=True, null=True)),
                ('log', models.TextField(blank=True, default='')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='tiktok_uploader.cookierobottask')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cookie_tasks', to='tiktok_uploader.tiktokaccount')),
            ],
            options={
                'verbose_name': 'Cookie Robot Task Account',
                'verbose_name_plural': 'Cookie Robot Task Accounts',
                'unique_together': {('task', 'account')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='bulkuploadaccount',
            unique_together={('bulk_task', 'account')},
        ),
        migrations.CreateModel(
            name='WarmupTaskAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('log', models.TextField(blank=True, default='')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warmup_tasks', to='tiktok_uploader.tiktokaccount')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='tiktok_uploader.warmuptask')),
            ],
            options={
                'verbose_name': 'Warmup Task Account',
                'verbose_name_plural': 'Warmup Task Accounts',
                'unique_together': {('task', 'account')},
            },
        ),
    ]
