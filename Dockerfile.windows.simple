FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DISPLAY=:99
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
ENV DOCKER_CONTAINER=1

# Set working directory
WORKDIR /app

# Install minimal system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    xvfb \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install Playwright (without system dependencies - will use system browser)
RUN pip install --no-cache-dir playwright==1.35.0

# Copy project
COPY . .

# Create necessary directories with proper permissions
RUN mkdir -p /app/static /app/temp /app/logs /app/media /app/db_data \
    && chmod -R 755 /app

# Create simple startup script with database initialization
RUN echo '#!/bin/bash\n\
# Start virtual display\n\
Xvfb :99 -screen 0 1920x1080x24 &\n\
export DISPLAY=:99\n\
sleep 2\n\
\n\
echo "üîß Setting up database..."\n\
# –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\
mkdir -p /app/db_data\n\
chmod 755 /app/db_data\n\
\n\
# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_PATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç\n\
export DATABASE_PATH=${DATABASE_PATH:-/app/db_data/db.sqlite3}\n\
echo "üìä Database path: $DATABASE_PATH"\n\
\n\
echo "üîß Initializing database..."\n\
# Run Django migrations\n\
python manage.py makemigrations --noinput || echo "Migrations already exist"\n\
python manage.py migrate --noinput || echo "Migration failed"\n\
\n\
# Create superuser\n\
echo "üë§ Creating superuser..."\n\
python manage.py shell << EOF\n\
from django.contrib.auth import get_user_model\n\
User = get_user_model()\n\
if not User.objects.filter(username="admin").exists():\n\
    User.objects.create_superuser("admin", "admin@example.com", "admin123")\n\
    print("‚úÖ Superuser created: admin / admin123")\n\
else:\n\
    print("üîê Superuser already exists")\n\
EOF\n\
\n\
# Clean old static files to avoid duplicates\n\
echo "üßπ Cleaning old static files..."\n\
rm -rf /app/staticfiles/css /app/staticfiles/js /app/staticfiles/uploader\n\
\n\
# Collect static files (with proper paths)\n\
echo "üìÅ Collecting static files..."\n\
python manage.py collectstatic --noinput --clear\n\
\n\
# Debug: Show static files structure\n\
echo "üîç Debug: Static files structure:"\n\
echo "Source files in uploader/static:"\n\
find /app/uploader/static -type f | head -10\n\
echo "Collected files in staticfiles:"\n\
find /app/staticfiles -name "*.css" -o -name "*.js" -o -name "*.svg" | grep -E "(apple|logo)" | head -10\n\
\n\
# Verify critical static files exist\n\
echo "üîç Verifying static files..."\n\
if [ -f "/app/staticfiles/css/apple-style.css" ] && [ -f "/app/staticfiles/js/apple-ui.js" ] && [ -f "/app/staticfiles/css/logo.svg" ]; then\n\
    echo "‚úÖ All critical static files found"\n\
else\n\
    echo "‚ö†Ô∏è Missing critical static files, checking locations:"\n\
    test -f "/app/staticfiles/css/apple-style.css" && echo "‚úÖ apple-style.css found" || echo "‚ùå apple-style.css missing"\n\
    test -f "/app/staticfiles/js/apple-ui.js" && echo "‚úÖ apple-ui.js found" || echo "‚ùå apple-ui.js missing"\n\
    test -f "/app/staticfiles/css/logo.svg" && echo "‚úÖ logo.svg found" || echo "‚ùå logo.svg missing"\n\
    echo "üìÇ Manual copy from source..."\n\
    mkdir -p /app/staticfiles/css /app/staticfiles/js\n\
    cp -f /app/uploader/static/css/* /app/staticfiles/css/ 2>/dev/null || true\n\
    cp -f /app/uploader/static/js/* /app/staticfiles/js/ 2>/dev/null || true\n\
    echo "üìÇ Static files copied manually"\n\
fi\n\
\n\
echo "üöÄ Starting application..."\n\
# Run application\n\
exec python manage.py runserver 0.0.0.0:8000\n\
' > /app/start.sh && chmod +x /app/start.sh

# Expose port
EXPOSE 8000

# Run the startup script
CMD ["/app/start.sh"] 