version: '3.8'

services:
  orchestrator:
    build: .
    container_name: tiktok-orchestrator
    ports:
      - "9000:9000"
    environment:
      - DATABASE_URL=sqlite:///data/orchestrator.db
      - LOG_LEVEL=INFO
      - API_PORT=9000
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Опциональные сервисы для продакшена
  
  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: tiktok-orchestrator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles: ["production"]

  # PostgreSQL для продакшена
  postgres:
    image: postgres:15-alpine
    container_name: tiktok-orchestrator-postgres
    environment:
      POSTGRES_DB: orchestrator
      POSTGRES_USER: orchestrator
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-this-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles: ["production"]

  # Nginx для reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: tiktok-orchestrator-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - orchestrator
    restart: unless-stopped
    profiles: ["production"]

volumes:
  redis_data:
  postgres_data:

networks:
  default:
    name: tiktok-orchestrator-network
